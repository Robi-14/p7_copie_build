{"version":3,"sources":["actions/user.actions.js","components/AppContext.js","components/Log/FormLogin/FormLogin.js","components/Log/FormRegister/FormRegister.js","components/Log/Log.js","components/LeftNav/LeftNav.js","components/profillogged/ProfilLogged.js","pages/Profil/Profil.js","actions/post.actions.js","components/Post/PostForm.js","Utils/Utils.js","actions/comment.action.js","components/Post/EditDeleteComment.js","components/Post/CardComment.js","components/Post/Deletecard.js","components/Post/Card.js","components/Thread/Thread.js","pages/Home/Home.js","components/Log/Logout.js","components/Header/Navbar/Navbar.js","components/Routes/index.js","App.js","reducers/user.reducer.js","reducers/post.reducer.js","actions/users.actions.js","reducers/users.reducer.js","reducers/comment.reducer.js","reducers/index.js","index.js"],"names":["GET_USER","DELETE_USER","token","localStorage","getItem","UidContext","createContext","FormLogin","useState","email","setEmail","password","setPassword","Error","document","querySelector","action","onSubmit","e","preventDefault","axios","post","headers","then","response","setItem","data","window","location","catch","err","innerHTML","id","htmlFor","type","name","onChange","target","value","className","FormRegister","formSubmit","setFormSubmit","lastname","setLastName","firstname","setFirstName","handleRegister","a","res","placeholder","Log","registerModal","setRegisterModal","loginModal","setLoginModal","handleModal","onClick","LeftNav","to","exact","activeClassName","src","alt","ProfilLogged","dispatch","useDispatch","userData","useSelector","state","userReducer","handleDelete","uid","delete","Authorization","console","log","removeItem","confirm","Profil","useContext","GET_POSTS","DELETE_POST","getPosts","num","get","array","slice","payload","updatePost","postId","put","createPost","PostForm","message","setMessage","attachement","setAttachement","handlePost","FormData","append","getElementById","files","handlePicture","dateParser","date","Date","toLocaleDateString","year","month","day","hour","minute","GET_COMMENTS","EDDIT_COMMENT","DELETE_COMMENT","getComments","EditDeleteComment","comment","isAuthor","setIsAuthor","edit","setEdit","text","setText","commentId","deleteComment","useEffect","userId","content","edditComment","defaultValue","CardComment","textComment","setTextComment","commentReducer","usersData","usersReducer","map","messageId","user","join","createdAt","addComment","Deletecard","props","deleteQuote","Card","isUpdated","setIsUpdated","textUpdate","setTextUpdate","showComments","setShowComments","updateItem","UserId","attachment","isAdmin","Thread","loadPost","setLoadPost","count","setCount","posts","postReducer","loadMore","innerHeight","documentElement","scrollTop","scrollingElement","scrollHeight","addEventListener","removeEventListener","Home","Logout","Navbar","Index","path","component","App","exp","setExp","setUid","decodedToken","jwt_decode","getUser","now","Provider","initialState","GET_USERS","combineReducers","filter","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render"],"mappings":"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","file":"static/js/main.f659c4bc.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const GET_USER = \"GET_USER\";\r\nexport const DELETE_USER = \"DELETE_USER\";\r\n\r\nconst userToken = localStorage.getItem(\"Token\");\r\nconst token = userToken;\r\n\r\n// recuperation de l'user\r\nexport const getUser = (uid) => {\r\n  return (dispatch) => {\r\n    return axios\r\n      .get(`http://localhost:5000/api/user/${uid}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((res) => {\r\n        dispatch({ type: GET_USER, payload: res.data });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\n\r\n// suppression de l'user\r\nexport const deleteUser = (uid) => {\r\n  return (dispatch) => {\r\n    return axios\r\n      .delete(`http://localhost:5000/api/user/${uid}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\n","import { createContext } from \"react\";\r\n\r\nexport const UidContext = createContext();\r\n","import React, { useState } from \"react\";\r\nimport \"./FormLogin.css\";\r\nimport axios from \"axios\";\r\n\r\nexport default function FormLogin() {\r\n  // mise en place des states\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  // selection de la div error\r\n  const Error = document.querySelector(\".message.error\");\r\n\r\n  // fction login\r\n  const login = () => {\r\n    // envoie l'email, et le password à l'api\r\n\r\n    axios\r\n      .post(\"http://localhost:5000/api/user/login\", {\r\n        email,\r\n        password,\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      })\r\n\r\n      // recupere la response et la stock dans le local storage et nous redirige sur le chemain '/'\r\n      .then((response) => {\r\n        localStorage.setItem(\"Token\", response.data.token);\r\n\r\n        window.location = \"/\";\r\n      })\r\n\r\n      // affiche le message d'erreur\r\n      .catch((err) => (Error.innerHTML = err.response.data));\r\n  };\r\n\r\n  // fonction qui se declenche à la soumission du formulaire,\r\n  const handlelogin = (e) => {\r\n    // enleve l'evenement par default\r\n    e.preventDefault();\r\n    // lance la fonction login\r\n    login();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form action=\"\" onSubmit={handlelogin} id=\"login-form\">\r\n        <label htmlFor=\"email\">Email</label>\r\n        <br />\r\n        <input\r\n          type=\"text\"\r\n          name=\"email\"\r\n          id=\"email\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          value={email}\r\n        />\r\n        <div className=\"email error\"></div>\r\n        <br />\r\n        <label htmlFor=\"password\">Mot de passe</label>\r\n        <br />\r\n        <input\r\n          type=\"password\"\r\n          name=\"password\"\r\n          id=\"password\"\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          value={password}\r\n        />\r\n        <div className=\"message error\"></div>\r\n        <input type=\"submit\" value=\"Se connecter\" />\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"./FormRegister.css\";\r\nimport axios from \"axios\";\r\nimport FormLogin from \"../FormLogin/FormLogin\";\r\n\r\nexport default function FormRegister() {\r\n  // mise en place des states\r\n  const [formSubmit, setFormSubmit] = useState(false);\r\n  const [lastname, setLastName] = useState(\"\");\r\n  const [firstname, setFirstName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const Error = document.querySelector(\".message.error\");\r\n  // fonction à la soumission du formulaire\r\n  const handleRegister = async (e) => {\r\n    // enleve l'evenement par default\r\n    e.preventDefault();\r\n    // envoie à l'api les infos\r\n    await axios\r\n      .post(\"http://localhost:5000/api/user/register\", {\r\n        lastname,\r\n        firstname,\r\n        email,\r\n        password,\r\n      })\r\n      //si ok on passe formSubmit sur true\r\n      .then((res) => {\r\n        setFormSubmit(true);\r\n      })\r\n      //sinon on affiche l'erreur\r\n      .catch((err) => (Error.innerHTML = err.response.data));\r\n  };\r\n  // si formSubmit est true on affiche le composant FormLoggin et le message d'inscription ok, sinon on affiche le formulaire d'inscription\r\n  return (\r\n    <>\r\n      {formSubmit ? (\r\n        <>\r\n          <FormLogin />\r\n          <h4 className=\"ok\">Inscription reussi, veuillez-vous connecter!</h4>\r\n        </>\r\n      ) : (\r\n        <form onSubmit={(e) => handleRegister(e)} id=\"register-form\">\r\n          <label htmlFor=\"name\">Nom</label>\r\n          <br />\r\n          <input\r\n            onChange={(e) => setLastName(e.target.value)}\r\n            type=\"text\"\r\n            placeholder=\"Name\"\r\n            id=\"name\"\r\n            value={lastname}\r\n          />\r\n          <br />\r\n          <label htmlFor=\"firstname\">Prenom</label>\r\n          <br />\r\n          <input\r\n            onChange={(e) => setFirstName(e.target.value)}\r\n            type=\"text\"\r\n            placeholder=\"Firstname\"\r\n            id=\"firstname\"\r\n            value={firstname}\r\n          />\r\n          <br />\r\n          <label htmlFor=\"email\">Email</label>\r\n          <br />\r\n          <input\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            type=\"text\"\r\n            placeholder=\"Email\"\r\n            id=\"email\"\r\n            value={email}\r\n          />\r\n          <br />\r\n          <label htmlFor=\"password\">Mot de passe</label>\r\n          <br />\r\n          <input\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type=\"password\"\r\n            placeholder=\"Mot de passe\"\r\n            id=\"password\"\r\n            value={password}\r\n          />\r\n          <br />\r\n          <div className=\"message error\"></div>\r\n          <input type=\"submit\" value=\"S'inscrire\" />\r\n        </form>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport FormLogin from \"./FormLogin/FormLogin\";\r\nimport FormRegister from \"./FormRegister/FormRegister\";\r\nimport \"./Log.css\";\r\n\r\nexport default function Log() {\r\n  // mise en place des states\r\n  const [registerModal, setRegisterModal] = useState(false);\r\n  const [loginModal, setLoginModal] = useState(true);\r\n\r\n  // fonction  affichage modal au clic sur : s'inscrire ou se connecter\r\n  const handleModal = (e) => {\r\n    // si e.target.id correspond à register alors on passe loginModal sur false et registerModal sur True\r\n    if (e.target.id === \"register\") {\r\n      setLoginModal(false);\r\n      setRegisterModal(true);\r\n      // si e.target.id correspond à login alors on passe registerModal sur false et loginModal sur true\r\n    } else if (e.target.id === \"login\") {\r\n      setRegisterModal(false);\r\n      setLoginModal(true);\r\n    }\r\n  };\r\n\r\n  // si registerModal est true , on affiche le composant FormRegister\r\n  // si LoginModal est true , on affiche le composant LoginModal\r\n  return (\r\n    <div>\r\n      <div className=\"log-form\">\r\n        <div className=\"form-container\">\r\n          <ul>\r\n            <li\r\n              onClick={handleModal}\r\n              id=\"register\"\r\n              className={registerModal ? \"active-btn\" : null}\r\n            >\r\n              S'inscrire\r\n            </li>\r\n            <li\r\n              onClick={handleModal}\r\n              id=\"login\"\r\n              className={loginModal ? \"active-btn\" : null}\r\n            >\r\n              Se connecter\r\n            </li>\r\n          </ul>\r\n          {registerModal && <FormRegister />}\r\n          {loginModal && <FormLogin />}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./LeftNav.css\";\r\n// importation de Navlink  qui va permettre de diriger vers le chemin exact et d'activer la classe active sur le bouton\r\nexport default function LeftNav() {\r\n  return (\r\n    <div className=\"leftnav-container\">\r\n      <div className=\"icons\">\r\n        <NavLink to=\"/\" exact activeClassName=\"active-leftnav\">\r\n          <img src=\"./img/home.svg\" alt=\"Logo Home\" className=\"logo-leftnav\" />\r\n        </NavLink>\r\n        <br />\r\n        <NavLink to=\"/profil\" exact activeClassName=\"active-leftnav\">\r\n          <img\r\n            src=\"./img/profil.svg\"\r\n            alt=\"Logo profil\"\r\n            className=\"logo-leftnav\"\r\n          />\r\n        </NavLink>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport LeftNav from \"../LeftNav/LeftNav\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { deleteUser } from \"../../actions/user.actions\";\r\nimport \"./ProfilLogged.css\";\r\n\r\nexport default function ProfilLogged() {\r\n  // permet de récupérer la fonction dispatch au sein de notre composant afin de pouvoir dispatch des actions Redux.\r\n  const dispatch = useDispatch();\r\n  // useSelector connecte au store avec le userReducer\r\n  const userData = useSelector((state) => state.userReducer);\r\n  // lance la fonction au clic sur le bouton supprimer compte\r\n  const handleDelete = () => {\r\n    // supprime le compte\r\n    dispatch(deleteUser());\r\n    // on enleve le token du localstorage\r\n    localStorage.removeItem(\"Token\");\r\n    //on renvoie vers le chemin '/profil'\r\n    window.location = \"/profil\";\r\n  };\r\n  return (\r\n    <div className=\"profilLogged-container\">\r\n      <LeftNav />\r\n      <div className=\"profilForm-container\">\r\n        <div className=\"profilForm\">\r\n          <h3 className=\"titreprofil\">Votre Profil</h3>\r\n          <h4 className=\"label\">Votre nom</h4>\r\n          <p className=\"infoprofil\">{userData.lastname}</p>\r\n          <h4 className=\"label\">Votre prénom</h4>\r\n          <p className=\"infoprofil\">{userData.firstname}</p>\r\n          <h4 className=\"label\">Votre email</h4>\r\n          <p className=\"infoprofil\">{userData.email}</p>\r\n          <button\r\n            onClick={() => {\r\n              if (\r\n                window.confirm(\" Voulez-vous vraiment supprimer ce message ? \")\r\n              )\r\n                handleDelete();\r\n            }}\r\n            className=\"edit\"\r\n          >\r\n            Supprimer le compte\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport Log from \"../../components/Log/Log\";\r\nimport \"./Profil.css\";\r\nimport { UidContext } from \"../../components/AppContext\";\r\nimport ProfilLogged from \"../../components/profillogged/ProfilLogged\";\r\n\r\nexport default function Profil() {\r\n  //on recupere l'userId\r\n  const uid = useContext(UidContext);\r\n\r\n  // si uid est true alors on affiche le composant ProfilLogged, sinon on affiche le composant Log\r\n  return (\r\n    <div className=\"profil-page\">\r\n      {uid ? (\r\n        <ProfilLogged />\r\n      ) : (\r\n        <div className=\"log-container\">\r\n          <div className=\"log\">\r\n            <Log />\r\n          </div>\r\n          <div className=\"img-container\">\r\n            <img\r\n              src=\"./img/icon-left-font.svg\"\r\n              alt=\"Logo_groupomania\"\r\n              className=\"logo-groupo\"\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\n\r\n//posts\r\nexport const GET_POSTS = \"GET_POSTS\";\r\nexport const UPDATE_POST = \"UPDATE_POST\";\r\nexport const DELETE_POST = \"DELETE_POST\";\r\nexport const CREATE_POST = \"CREATE_POST\";\r\n\r\nconst userToken = localStorage.getItem(\"Token\");\r\nconst token = userToken;\r\n\r\n// affichage des posts\r\nexport const getPosts = (num) => {\r\n  return (dispatch) => {\r\n    return axios\r\n      .get(\"http://localhost:5000/api/messages/\", {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((res) => {\r\n        const array = res.data.slice(0, num);\r\n        dispatch({ type: GET_POSTS, payload: array });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\n\r\n// mise à jour du post\r\nexport const updatePost = (postId, data) => {\r\n  return (dispatch) => {\r\n    return axios.put(`http://localhost:5000/api/messages/${postId}`, data, {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n  };\r\n};\r\n\r\n// suppression du post\r\nexport const deletePost = (postId) => {\r\n  return (dispatch) => {\r\n    return axios\r\n      .delete(`http://localhost:5000/api/messages/${postId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((res) => {\r\n        dispatch({ type: DELETE_POST, payload: { postId } });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\n\r\n// creation d'un post\r\nexport const createPost = (data) => {\r\n  return (dispatch) => {\r\n    return axios.post(\"http://localhost:5000/api/messages/new\", data, {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n  };\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { createPost, getPosts } from \"../../actions/post.actions\";\r\n\r\nexport default function PostForm() {\r\n  //mise en place des states\r\n  const [message, setMessage] = useState(\"\");\r\n  const [attachement, setAttachement] = useState();\r\n  // useSelector connecte au store avec le userReducer\r\n  const userData = useSelector((state) => state.userReducer);\r\n  // permet de récupérer la fonction dispatch au sein de notre composant afin de pouvoir dispatch des actions Redux.\r\n  const dispatch = useDispatch();\r\n  // fonction asynchrone qui se lance au submit du formulaire\r\n  const handlePost = async (e) => {\r\n    // enleve le rafraichissement par defaut\r\n    e.preventDefault();\r\n    // creation du formData avec en enfant le content et l'attachement\r\n    if (message || attachement) {\r\n      const data = new FormData();\r\n      data.append(\"content\", message);\r\n      data.append(\"attachment\", attachement);\r\n      // on recupere la fonction dispatch de createPost(), on y ajoute en parametre data créé au dessus\r\n      await dispatch(createPost(data));\r\n      // on recupere la fct dispatch de getPost(), afin de rafficher les messages avec le nouveau post\r\n      dispatch(getPosts());\r\n      // on remet a l'initial le state message\r\n      setMessage(\"\");\r\n      // on remet a l'initial le state attachement\r\n      setAttachement();\r\n      document.getElementById(\"file-upload\").value = \"\";\r\n    }\r\n  };\r\n\r\n  // quand l'input de type file change on recupere l'evenement e, afin de modifier le state attachement de e.target.file\r\n  const handlePicture = (e) => {\r\n    setAttachement(e.target.files[0]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"post-form-container\">\r\n      <form action=\"\" onSubmit={handlePost}>\r\n        <textarea\r\n          name=\"textpost\"\r\n          className=\"text-post\"\r\n          placeholder={`Quoi de neuf, ${userData.firstname}`}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          value={message}\r\n        />\r\n        <div className=\"attchement-picture\">\r\n          <img src=\"./img/images.svg\" alt=\"images\" className=\"btn-img\" />\r\n          <input\r\n            type=\"file\"\r\n            id=\"file-upload\"\r\n            name=\"attachment\"\r\n            onChange={(e) => handlePicture(e)}\r\n          />\r\n        </div>\r\n        <input type=\"submit\" value=\"Publier\" />\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","export const dateParser = (date) => {\r\n  let newDate = new Date(date).toLocaleDateString(\"fr-FR\", {\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n    hour: \"numeric\",\r\n    minute: \"numeric\",\r\n  });\r\n  return newDate;\r\n};\r\n","import axios from \"axios\";\r\n\r\nexport const GET_COMMENTS = \"GET_COMMENTS\";\r\nexport const ADD_COMMENT = \"ADD_COMMENT\";\r\nexport const EDDIT_COMMENT = \"EDDIT_COMMENT\";\r\nexport const DELETE_COMMENT = \"DELETE_COMMENT\";\r\n\r\n// recuperation des commentaires\r\nexport const getComments = (postId) => {\r\n  const userToken = localStorage.getItem(\"Token\");\r\n  const token = userToken;\r\n\r\n  return (dispatch) => {\r\n    return axios\r\n      .get(`http://localhost:5000/api/messages/${postId}}/commentaires`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((res) => {\r\n        dispatch({ type: GET_COMMENTS, payload: res.data });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\n\r\n//ajout d'un commentaire\r\nexport const addComment = (postId, content) => {\r\n  const userToken = localStorage.getItem(\"Token\");\r\n  const token = userToken;\r\n\r\n  return (dispatch) => {\r\n    return axios\r\n      .post(\r\n        `http://localhost:5000/api/messages/${postId}/commentaires`,\r\n        { content },\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        dispatch({ type: ADD_COMMENT, payload: { postId } });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\n\r\n// edition d'un commentaire\r\nexport const edditComment = (postId, commentId, content) => {\r\n  const userToken = localStorage.getItem(\"Token\");\r\n  const token = userToken;\r\n\r\n  return (dispatch) => {\r\n    return axios\r\n      .put(\r\n        `http://localhost:5000/api/messages/${postId}/commentaires/${commentId}`,\r\n        { content },\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        dispatch({ type: EDDIT_COMMENT, payload: { content, commentId, postId } });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\n//suppression d'un commentaire\r\nexport const deleteComment = (postId, commentId) => {\r\n  const userToken = localStorage.getItem(\"Token\");\r\n  const token = userToken;\r\n\r\n  return (dispatch) => {\r\n    return axios\r\n      .delete(\r\n        `http://localhost:5000/api/messages/${postId}/commentaires/${commentId}`,\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        dispatch({ type: DELETE_COMMENT, payload: { postId, commentId } });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { UidContext } from \"../AppContext\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { deleteComment, edditComment } from \"../../actions/comment.action\";\r\nimport { getComments } from \"../../actions/comment.action\";\r\n\r\nexport default function EditDeleteComment({ comment, postId }) {\r\n  // mise en place des states\r\n  const [isAuthor, setIsAuthor] = useState(false);\r\n  const [edit, setEdit] = useState(false);\r\n  const [text, setText] = useState(\"\");\r\n  //on recupere l'userId\r\n  const uid = useContext(UidContext);\r\n  // permet de récupérer la fonction dispatch au sein de notre composant afin de pouvoir dispatch des actions Redux.\r\n  const dispatch = useDispatch();\r\n\r\n  // à la soumission du fomulaire\r\n  const handleEdit = (e) => {\r\n    // on retire l'evenement par defaut au clic sur le bouton\r\n    e.preventDefault();\r\n    // si on a modifier le message du commentaire:\r\n    if (text) {\r\n      // On edit le commentaire avec en parametre le posId, le comment Id, et le text\r\n      dispatch(edditComment(postId, comment.id, text))\r\n        // on affiche à nouveau les commentaires\r\n        .then(() => dispatch(getComments()));\r\n      // on rinitialise le state text\r\n      setText(\"\");\r\n      // et on passe le state edit sur false\r\n      setEdit(false);\r\n    }\r\n  };\r\n\r\n  // au clic sur l'image poubelle declenche l'alerte window => si oui ,declanche la fonction\r\n  const handleDelete = () => {\r\n    // supprime le commentaire avec en parametre le postId et comment.id\r\n    dispatch(deleteComment(postId, comment.id))\r\n      // on affiche à nouveau les commentaires\r\n      .then(() => dispatch(getComments()));\r\n  };\r\n\r\n  //useEffect s'effectue chaque fois que uid ,comment.userId change\r\n  useEffect(() => {\r\n    // check si l'userid, est egal au comment.userId si oui , passe isAuthor à true\r\n    const checkAuthor = () => {\r\n      if (uid === comment.userId) {\r\n        setIsAuthor(true);\r\n      }\r\n    };\r\n    // lance la fonction checkAutor\r\n    checkAuthor();\r\n  }, [uid, comment.userId]);\r\n  return (\r\n    <div>\r\n      {isAuthor && edit === false && (\r\n        <div className=\"edit-comment\">\r\n          <div onClick={() => setEdit(!edit)}>\r\n            <img src=\"./img/edit.svg\" alt=\"edit\" className=\"btn-img\" />\r\n          </div>\r\n          <div\r\n            onClick={() => {\r\n              if (\r\n                window.confirm(\" Voulez-vous vraiment supprimer ce message ? \")\r\n              )\r\n                handleDelete();\r\n            }}\r\n          >\r\n            <img src=\"./img/trash.svg\" alt=\"delete\" className=\"btn-img\" />\r\n          </div>\r\n        </div>\r\n      )}\r\n      {isAuthor && edit && (\r\n        <form action=\"\" onSubmit={handleEdit} className=\"edit-comment-form\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"text\"\r\n            className=\"textcomment edit-comment\"\r\n            onChange={(e) => setText(e.target.value)}\r\n            defaultValue={comment.content}\r\n          />\r\n          <div className=\"edit-btn\">\r\n            <label\r\n              htmlFor=\"text\"\r\n              onClick={() => setEdit(!edit)}\r\n              className=\"label-edit\"\r\n            >\r\n              annuler\r\n            </label>\r\n\r\n            <input type=\"submit\" value=\"Modifier\" className=\"submit-edit\" />\r\n          </div>\r\n        </form>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { addComment, getComments } from \"../../actions/comment.action\";\r\nimport { dateParser } from \"./../../Utils/Utils\";\r\nimport \"./Card.css\";\r\nimport EditDeleteComment from \"./EditDeleteComment\";\r\n\r\nexport default function CardComment({ post }) {\r\n  const [textComment, setTextComment] = useState(\"\");\r\n  // permet de récupérer la fonction dispatch au sein de notre composant afin de pouvoir dispatch des actions Redux.\r\n  const dispatch = useDispatch();\r\n  // useSelector connecte au store avec le commentReducer\r\n  const comment = useSelector((state) => state.commentReducer);\r\n  // useSelector connecte au store avec le usersReducer\r\n  const usersData = useSelector((state) => state.usersReducer);\r\n\r\n  console.log(post.id);\r\n  //useEffect s'effectue chaque fois que le dispatch change\r\n  useEffect(() => {\r\n    dispatch(getComments(post.id));\r\n  }, [dispatch, post.id]);\r\n\r\n  // declanche la fonction quand le quand le formulaire est soumis\r\n  const handleComment = (e) => {\r\n    // enleve evenement par default au clic sur l'input\r\n    e.preventDefault();\r\n    // si textComment est pas null\r\n    if (textComment) {\r\n      //  on ajoute un commentaire avec addComment, avec en parametre post.id et textComment\r\n      dispatch(addComment(post.id, textComment))\r\n        // on affiche les commentaires\r\n        .then(() => dispatch(getComments()))\r\n        // on rinitialise textComment\r\n        .then(() => setTextComment(\"\"));\r\n    }\r\n  };\r\n  return (\r\n    <div key={comment.id}>\r\n      <div>\r\n        {!!comment[0] &&\r\n          comment.map((comment) => {\r\n            if (post.id === comment.messageId)\r\n              return (\r\n                <div key={comment.id} className=\"comments-container\">\r\n                  <div className=\"user_date\">\r\n                    <p>\r\n                      {usersData\r\n                        .map((user) => {\r\n                          if (user.id === comment.userId) return user.firstname;\r\n                          else return null;\r\n                        })\r\n                        .join(\"\")}{\" \"}\r\n                      {usersData\r\n                        .map((user) => {\r\n                          if (user.id === comment.userId) return user.lastname;\r\n                          else return null;\r\n                        })\r\n                        .join(\"\")}\r\n                    </p>\r\n                    <p>Posté le {dateParser(comment.createdAt)}</p>\r\n                  </div>\r\n                  <div className=\"content_attachment\">\r\n                    <p className=\"content\">{comment.content}</p>\r\n                    {post.attachement && (\r\n                      <img\r\n                        src={post.attachement}\r\n                        alt=\"card-attachement\"\r\n                        className=\"card-attachement\"\r\n                      />\r\n                    )}\r\n                  </div>\r\n                  <EditDeleteComment comment={comment} postId={post.id} />\r\n                </div>\r\n              );\r\n            else return null;\r\n          })}\r\n      </div>\r\n      <form action=\"\" onSubmit={handleComment} className=\"comment-form\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"text\"\r\n          onChange={(e) => setTextComment(e.target.value)}\r\n          value={textComment}\r\n          placeholder=\"Ecrire un commentaire\"\r\n          className=\"textcomment\"\r\n        />\r\n        <br />\r\n        <input type=\"submit\" value=\"Envoyer\" />\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { deletePost } from \"../../actions/post.actions\";\r\n\r\nexport default function Deletecard(props) {\r\n  // permet de récupérer la fonction dispatch au sein de notre composant afin de pouvoir dispatch des actions Redux.\r\n  const dispatch = useDispatch();\r\n  // au click sur l'image de poubelle lance la fonction\r\n  const deleteQuote = () => {\r\n    // on efface le post correspondant à l'id du post\r\n    dispatch(deletePost(props.id));\r\n  };\r\n\r\n  return (\r\n    <div\r\n      onClick={() => {\r\n        if (window.confirm(\" Voulez-vous vraiment supprimer ce message ? \"))\r\n          deleteQuote();\r\n      }}\r\n    >\r\n      <img src=\"./img/trash.svg\" alt=\"delete\" className=\"btn-img\" />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { updatePost, getPosts } from \"../../actions/post.actions\";\r\nimport { dateParser } from \"./../../Utils/Utils\";\r\n\r\nimport \"./Card.css\";\r\nimport CardComment from \"./CardComment\";\r\nimport Deletecard from \"./Deletecard\";\r\n\r\nexport default function Card({ post }) {\r\n  // useSelector connecte au store avec le usersReducer\r\n  const usersData = useSelector((state) => state.usersReducer);\r\n  // useSelector connecte au store avec le userReducer\r\n  const userData = useSelector((state) => state.userReducer);\r\n  // permet de récupérer la fonction dispatch au sein de notre composant afin de pouvoir dispatch des actions Redux.\r\n  const dispatch = useDispatch();\r\n  //mise en place des states\r\n  const [isUpdated, setIsUpdated] = useState(false);\r\n  const [textUpdate, setTextUpdate] = useState(null);\r\n  const [showComments, setShowComments] = useState(false);\r\n  const [attachement, setAttachement] = useState();\r\n\r\n  // quand l'input de type file change on recupere l'evenement e, afin de modifier le state attachement de e.target.file\r\n  const handlePicture = (e) => {\r\n    setAttachement(e.target.files[0]);\r\n  };\r\n\r\n  // au click sur le bouton modifier des la fonction asynchrone\r\n  const updateItem = async (e) => {\r\n    // si il y a un texte modifier ou une image modifié\r\n    if (textUpdate || attachement) {\r\n      // on retire l'evenement par default\r\n\r\n      const data = new FormData();\r\n      data.append(\"content\", textUpdate);\r\n      data.append(\"attachment\", attachement);\r\n      // on attend la mise à jour du post\r\n      await dispatch(updatePost(post.id, data));\r\n\r\n      dispatch(getPosts());\r\n    }\r\n  };\r\n  const toto = () => {\r\n    setIsUpdated(false);\r\n    updateItem();\r\n  };\r\n \r\n  return (\r\n    <div className=\"card-container\" key={post.id}>\r\n      <div className=\"user_date\">\r\n        <p>\r\n          {!!usersData[0] &&\r\n            usersData\r\n              .map((user) => {\r\n                if (user.id === post.UserId) return user.firstname;\r\n                else return null;\r\n              })\r\n              .join(\"\")}{\" \"}\r\n          {!!usersData[0] &&\r\n            usersData\r\n              .map((user) => {\r\n                if (user.id === post.UserId) return user.lastname;\r\n                else return null;\r\n              })\r\n              .join(\"\")}\r\n        </p>\r\n        <p>Posté le {dateParser(post.createdAt)}</p>\r\n      </div>\r\n      <div className=\"content_attachment\">\r\n        {isUpdated ? (\r\n          <div className=\"updatde-post\">\r\n            <textarea\r\n              defaultValue={post.content}\r\n              onChange={(e) => setTextUpdate(e.target.value)}\r\n            ></textarea>\r\n            <div className=\"button-container\">\r\n              <button onClick={(e) => toto(e)} className=\"edit\">\r\n                Modifier\r\n              </button>\r\n              <input\r\n                type=\"file\"\r\n                id=\"file-upload\"\r\n                name=\"attachment\"\r\n                onChange={(e) => handlePicture(e)}\r\n              />\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <p className=\"content\">{post.content}</p>\r\n          </div>\r\n        )}\r\n        {post.attachment && (\r\n          <img\r\n            src={post.attachment}\r\n            alt=\"card-attachement\"\r\n            className=\"card-attachement\"\r\n          />\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"button\">\r\n        <img\r\n          src=\"./img/comment.svg\"\r\n          alt=\"icon comment\"\r\n          className=\"btn-img\"\r\n          onClick={() => setShowComments(!showComments)}\r\n        />\r\n        {userData.isAdmin || userData.id === post.UserId ? (\r\n          <div className=\"button-container\">\r\n            <div onClick={() => setIsUpdated(!isUpdated)}>\r\n              <img src=\"/img/edit.svg\" alt=\"edit\" className=\"btn-img\" />{\" \"}\r\n            </div>\r\n            <Deletecard id={post.id} />\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n      {showComments && <CardComment post={post} />}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getPosts } from \"../../actions/post.actions\";\r\nimport Card from \"../Post/Card\";\r\nimport \"./Thread.css\";\r\n\r\nexport default function Thread() {\r\n  //mise en place des states\r\n  const [loadPost, setLoadPost] = useState(true);\r\n  const [count, setCount] = useState(10);\r\n  // permet de récupérer la fonction dispatch au sein de notre composant afin de pouvoir dispatch des actions Redux.\r\n  const dispatch = useDispatch();\r\n  // useSelector connecte au store avec le postReducer\r\n  const posts = useSelector((state) => state.postReducer);\r\n  //  fonction qui permet de faire l'infinite scroll\r\n  const loadMore = () => {\r\n    if (\r\n      window.innerHeight + document.documentElement.scrollTop + 1 >\r\n      document.scrollingElement.scrollHeight\r\n    ) {\r\n      setLoadPost(true);\r\n    }\r\n  };\r\n\r\n  //useEffect s'effectue chaque fois que loadPost , count, ou le dispatch change\r\n\r\n  useEffect(() => {\r\n    // si loadPost est true:\r\n    if (loadPost) {\r\n      // on recupere le nombre de post correspond au count\r\n      dispatch(getPosts(count));\r\n      // on passe loadPost sur false\r\n      setLoadPost(false);\r\n      // on modifie le count en lui ajoutant +5\r\n      setCount(count + 5);\r\n    }\r\n    // à l'evenement du scroll on declenche la fonction loadMore\r\n    window.addEventListener(\"scroll\", loadMore);\r\n    // une fois executé on l'enleve\r\n    return () => window.removeEventListener(\"scroll\", loadMore);\r\n  }, [loadPost, count, dispatch]);\r\n\r\n  // affichage du composant card avec en props post et postId\r\n  return (\r\n    <div className=\"thread-container\">\r\n      <div>\r\n        {!!posts[0] &&\r\n          posts.map((post) => {\r\n            return <Card post={post} key={post.id} />;\r\n          })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { UidContext } from \"../../components/AppContext\";\r\nimport LeftNav from \"../../components/LeftNav/LeftNav\";\r\nimport PostForm from \"../../components/Post/PostForm\";\r\nimport Thread from \"../../components/Thread/Thread\";\r\nimport Profil from \"../Profil/Profil\";\r\nimport \"./Home.css\";\r\n//import de nos composants\r\nexport default function Home() {\r\n  //on recupere l'userId\r\n  const uid = useContext(UidContext);\r\n  return (\r\n    //si uid est true alors on affiche les composants du mur du reseau social ,\r\n    //sinon on affiche le composant profil qui renvoie vers l'identification ou l'inscription\r\n    <div>\r\n      {uid ? (\r\n        <div className=\"home\">\r\n          <LeftNav />\r\n          <div className=\"main\">\r\n            <PostForm />\r\n            <Thread />\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <Profil />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./Logout.css\";\r\n\r\nexport default function Logout() {\r\n  // au clic sur  le logo logout ,\r\n  const logout = () => {\r\n    //enleve le token du localstorage et redirige vers le chemin '/profil'\r\n    localStorage.removeItem(\"Token\");\r\n\r\n    window.location = \"/profil\";\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <img\r\n        src=\"./img/log-out.svg\"\r\n        alt=\"log-out\"\r\n        className=\"logo-log\"\r\n        onClick={logout}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { UidContext } from \"../../AppContext\";\r\nimport Logout from \"../../Log/Logout\";\r\nimport \"./Navbar.css\";\r\n// importation de Navlink  qui va permettre de diriger vers le chemin exact et d'activer la classe active sur le bouton\r\n// uidContext pour recuperer l'uid\r\n\r\nexport default function Navbar() {\r\n  const uid = useContext(UidContext);\r\n  const userData = useSelector((state) => state.userReducer);\r\n  return (\r\n    <>\r\n      <nav>\r\n        <div className=\"nav-container\">\r\n          <NavLink exact to=\"/\">\r\n            <img\r\n              src=\"./img/logoBlack.svg\"\r\n              alt=\"Logo groupomania\"\r\n              className=\"img-log\"\r\n            />\r\n          </NavLink>\r\n          {uid ? (\r\n            <div className=\"profil\">\r\n              <NavLink exact to=\"/profil\">\r\n                <p className=\"welcome\">\r\n                  {userData.firstname} {userData.lastname}\r\n                </p>\r\n              </NavLink>\r\n              <Logout />\r\n            </div>\r\n          ) : (\r\n            <div className=\"profil\">\r\n              <NavLink exact to=\"/profil\">\r\n                <img src=\"./img/log-in.svg\" alt=\"log-in\" className=\"logo-log\" />\r\n              </NavLink>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Profil from \"../../pages/Profil/Profil\";\r\nimport Home from \"../../pages/Home/Home\";\r\nimport Navbar from \"../../components/Header/Navbar/Navbar\";\r\nimport { Redirect } from \"react-router-dom\";\r\n// on importe nos pages\r\n\r\nexport default function Index() {\r\n  return (\r\n    // BrowserRouter permet des routes dynamique\r\n    // si le chemain correspond à '/' on affiche la page Home\r\n    // si le chemain exact correspond à '/profil' on affiche la page Profil\r\n    // si le chemain est faux (ex:'/123' cela renvoie sur le chemain \"/\")\r\n\r\n    <Router>\r\n      <Navbar />\r\n      <Switch>\r\n        <Route path=\"/\" exact component={Home} />\r\n        <Route path=\"/profil\" exact component={Profil} />\r\n        <Redirect to=\"/\" />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getUser } from \"./actions/user.actions\";\nimport \"./App.css\";\nimport { UidContext } from \"./components/AppContext\";\nimport Routes from \"./components/Routes/index\";\nimport jwt_decode from \"jwt-decode\";\n\nfunction App() {\n  const [exp, setExp] = useState();\n  // configuration et stockage du uid  qui va permettre d'identifier l'utilisateur\n  const [uid, setUid] = useState();\n  // permet de récupérer la fonction dispatch au sein de notre composant afin de pouvoir dispatch des actions Redux.\n  const dispatch = useDispatch();\n  // useEffect s'effectue chaque fois que uid , ou le dispatch change\n  useEffect(() => {\n    // recuperation du token dans le local storage\n    const token = localStorage.getItem(\"Token\");\n    if (token) {\n      // si token dans le local storage on le decode et on prend l'userId\n      const decodedToken = jwt_decode(token);\n      const exp = decodedToken.exp;\n      setExp(exp);\n\n      const userId = decodedToken.userId;\n      // on modifie le state avec l'userId\n      setUid(userId);\n\n      // si on a un uid  alors on recupere l'utilisateur correspondant à l'userId\n      if (uid) {\n        dispatch(getUser(uid));\n      }\n      // verifie l'expiration du token , si expiré le retire du store et renvoie au login\n      if (Date.now() >= exp * 1000) {\n        localStorage.removeItem(\"Token\");\n        window.location = \"/profil\";\n      }\n    }\n  }, [uid, dispatch, exp]);\n\n  return (\n    // affiche le composant Routes\n    <UidContext.Provider value={uid}>\n      <Routes />\n    </UidContext.Provider>\n  );\n}\n\nexport default App;\n","import { DELETE_USER, GET_USER } from \"../actions/user.actions\";\r\n//initialiser le state\r\nconst initialState = {};\r\n\r\n// fonction userReducer avec en parametre :le state qui est egal à l'initial , et l'action\r\nexport default function userReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_USER:\r\n      return action.payload;\r\n\r\n    case DELETE_USER:\r\n      return state.filter((user) => user.id !== action.payload.uid);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { DELETE_POST, GET_POSTS } from \"../actions/post.actions\";\r\n\r\nconst initialState = {};\r\n\r\nexport default function postReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_POSTS:\r\n      return action.payload;\r\n\r\n    case DELETE_POST:\r\n      return state.filter((post) => post.id !== action.payload.postId);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport const GET_USERS = \"GET_USERS\";\r\n\r\nconst userToken = localStorage.getItem(\"Token\");\r\nconst token = userToken;\r\n\r\n// recuperation des users\r\nexport const getUsers = () => {\r\n  return (dispatch) => {\r\n    return axios\r\n      .get(`http://localhost:5000/api/user/`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((res) => {\r\n        dispatch({ type: GET_USERS, payload: res.data });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\n","import { GET_USERS } from \"../actions/users.actions\";\r\n\r\nconst initialState = {};\r\n\r\nexport default function usersReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_USERS:\r\n      return action.payload;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { DELETE_COMMENT, GET_COMMENTS } from \"../actions/comment.action\";\r\nimport { EDDIT_COMMENT } from \"../actions/comment.action\";\r\n\r\nconst initialState = {};\r\n\r\nexport default function commentReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_COMMENTS:\r\n      return action.payload;\r\n\r\n    case EDDIT_COMMENT:\r\n      return state.map((post) => {\r\n        if (post.id === action.payload.postId) {\r\n          return {\r\n            ...post,\r\n            content: action.payload.content,\r\n          };\r\n        } else return post;\r\n      });\r\n\r\n    case DELETE_COMMENT:\r\n      return state.map((comment) => {\r\n        if (comment.id === action.payload.comment.id) {\r\n          return state.filter(\r\n            (comment) => comment.id !== action.payload.commentId\r\n          );\r\n        } else return comment;\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport userReducer from \"./user.reducer\";\r\nimport postReducer from \"./post.reducer\";\r\nimport usersReducer from \"./users.reducer\";\r\nimport commentReducer from \"./comment.reducer\";\r\n\r\nexport default combineReducers({\r\n  userReducer,\r\n  postReducer,\r\n  usersReducer,\r\n  commentReducer,\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\nimport { getUsers } from \"./actions/users.actions\";\n// dev tools\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\n// creation du store avec  le reducer qui sera appelé quand on modifie notre state , et le devtools\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\nstore.dispatch(getUsers());\n\n// store en props du Provider , provider qui injecte  dans notre application ,nos données depuis le store\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}